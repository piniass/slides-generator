"use client";

import React from "react";
import { Button } from "@/components/ui/button";
import { Textarea } from "@/components/ui/textarea";
import { Download, X, Bold, Italic, Underline } from "lucide-react";

type FontSize = "small" | "medium" | "large";
type TextPosition = "top" | "center" | "bottom";

const FONT_SIZES: Record<FontSize, number> = {
  small: 24,
  medium: 36,
  large: 48,
};

interface ImageEditorDrawerProps {
  isOpen: boolean;
  selectedImage: string | null;
  overlayText: string;
  fontSize: FontSize;
  textPosition: TextPosition;
  textBorder: boolean;
  borderSize: number;
  textColor: string;
  strokeColor: string;
  isBold: boolean;
  isItalic: boolean;
  isUnderline: boolean;
  logo: string | null;
  logoPosition: TextPosition;
  onClose: () => void;
  onTextChange: (text: string) => void;
  onFontSizeChange: (size: FontSize) => void;
  onTextPositionChange: (position: TextPosition) => void;
  onTextBorderChange: (border: boolean) => void;
  onBoldChange: (bold: boolean) => void;
  onItalicChange: (italic: boolean) => void;
  onUnderlineChange: (underline: boolean) => void;
  onBorderSizeChange: (size: number) => void;
  onTextColorChange: (color: string) => void;
  onStrokeColorChange: (color: string) => void;
  onLogoChange: (logo: string | null) => void;
  onLogoPositionChange: (position: TextPosition) => void;
  onDownload: () => void;
}

export default function ImageEditorDrawer({
  isOpen,
  selectedImage,
  overlayText,
  fontSize,
  textPosition,
  textBorder,
  borderSize,
  textColor,
  strokeColor,
  isBold,
  isItalic,
  isUnderline,
  logo,
  logoPosition,
  onClose,
  onTextChange,
  onFontSizeChange,
  onTextPositionChange,
  onTextBorderChange,
  onBoldChange,
  onItalicChange,
  onUnderlineChange,
  onBorderSizeChange,
  onTextColorChange,
  onStrokeColorChange,
  onLogoChange,
  onLogoPositionChange,
  onDownload,
}: ImageEditorDrawerProps) {
  if (!isOpen) return null;

  return (
    <div
      className={`fixed inset-0 z-50 transition-all duration-500 ${
        !isOpen && "pointer-events-none"
      }`}
    >
      {/* Backdrop */}
      <div
        className={`absolute inset-0 bg-black/60 backdrop-blur-sm transition-all duration-500 ease-out ${
          isOpen ? "opacity-100" : "opacity-0"
        }`}
        onClick={onClose}
      />

      {/* Drawer */}
      <div
        className={`absolute top-0 right-0 h-full w-[600px] bg-zinc-900/95 border-l border-emerald-800/30 shadow-xl transform transition-all duration-500 ease-out flex flex-col ${
          isOpen ? "translate-x-0 opacity-100" : "translate-x-full opacity-0"
        }`}
      >
        {/* Fixed Header */}
        <div className="flex-none border-b border-emerald-800/30 bg-zinc-900/95 z-10">
          <div className="flex justify-between items-center p-4">
            <h2 className="text-lg font-semibold text-zinc-100">Edit Image</h2>
            <button
              onClick={onClose}
              className="text-zinc-400 hover:text-white transition-colors p-2 rounded-full hover:bg-zinc-800/50 cursor-pointer"
            >
              <X className="h-5 w-5" />
            </button>
          </div>
        </div>

        {/* Scrollable content */}
        <div className="flex-1 overflow-y-auto">
          {/* Input section */}
          <div className="px-6 py-4 space-y-4">
            {/* Text Input */}
            <div className="space-y-2">
              <label className="text-sm text-zinc-400">Text</label>
              <Textarea
                placeholder="Add text to your image..."
                value={overlayText}
                onChange={(e) => onTextChange(e.target.value)}
                className="bg-zinc-800/30 border-zinc-700/30 text-zinc-100 placeholder:text-zinc-400 min-h-[100px] resize-none"
              />
            </div>

            {/* Font Size */}
            <div className="space-y-2">
              <label className="text-sm text-zinc-400">Font Size</label>
              <select
                value={fontSize}
                onChange={(e) => onFontSizeChange(e.target.value as FontSize)}
                className="w-full bg-zinc-800/30 border border-zinc-700/30 text-zinc-100 rounded-md p-2 cursor-pointer hover:bg-zinc-700/30 focus:outline-none focus:ring-2 focus:ring-emerald-500"
              >
                <option className="bg-zinc-800" value="small">Small</option>
                <option className="bg-zinc-800" value="medium">Medium</option>
                <option className="bg-zinc-800" value="large">Large</option>
              </select>
            </div>

            {/* Text Position */}
            <div className="space-y-2">
              <label className="text-sm text-zinc-400">Text Position</label>
              <select
                value={textPosition}
                onChange={(e) => onTextPositionChange(e.target.value as TextPosition)}
                className="w-full bg-zinc-800/30 border border-zinc-700/30 text-zinc-100 rounded-md p-2 cursor-pointer hover:bg-zinc-700/30 focus:outline-none focus:ring-2 focus:ring-emerald-500"
              >
                <option className="bg-zinc-800" value="top">Top</option>
                <option className="bg-zinc-800" value="center">Center</option>
                <option className="bg-zinc-800" value="bottom">Bottom</option>
              </select>
            </div>

            {/* Text Style */}
            <div className="space-y-2">
              <label className="text-sm text-zinc-400">Text Style</label>
              <div className="flex gap-2">
                <Button
                  type="button"
                  onClick={() => onBoldChange(!isBold)}
                  variant={isBold ? "default" : "outline"}
                  className={`flex-1 ${
                    isBold
                      ? "bg-emerald-600 hover:bg-emerald-700"
                      : "bg-zinc-800/30 border-zinc-700/30 hover:bg-zinc-700/30 hover:text-emerald-500"
                  }`}
                >
                  <Bold className="h-4 w-4" />
                </Button>
                <Button
                  type="button"
                  onClick={() => onItalicChange(!isItalic)}
                  variant={isItalic ? "default" : "outline"}
                  className={`flex-1 ${
                    isItalic
                      ? "bg-emerald-600 hover:bg-emerald-700"
                      : "bg-zinc-800/30 border-zinc-700/30 hover:bg-zinc-700/30 hover:text-emerald-500"
                  }`}
                >
                  <Italic className="h-4 w-4" />
                </Button>
                <Button
                  type="button"
                  onClick={() => onUnderlineChange(!isUnderline)}
                  variant={isUnderline ? "default" : "outline"}
                  className={`flex-1 ${
                    isUnderline
                      ? "bg-emerald-600 hover:bg-emerald-700"
                      : "bg-zinc-800/30 border-zinc-700/30 hover:bg-zinc-700/30 hover:text-emerald-500"
                  }`}
                >
                  <Underline className="h-4 w-4" />
                </Button>
              </div>
            </div>

            {/* Text Border and Colors */}
            <div className="space-y-2">
              <div className="space-y-4">
                <div className="flex items-center">
                  <input
                    type="checkbox"
                    id="textBorder"
                    checked={textBorder}
                    onChange={(e) => onTextBorderChange(e.target.checked)}
                    className="h-4 w-4 rounded bg-zinc-800/30 border-zinc-700/30 text-emerald-500 focus:ring-emerald-500 focus:ring-offset-0 cursor-pointer"
                  />
                  <label htmlFor="textBorder" className="text-sm text-zinc-400 ml-2 cursor-pointer">
                    Text Border
                  </label>
                </div>

                <div className="flex items-center justify-between">
                  <label className="text-sm text-zinc-400">Text Color</label>
                  <div className="flex items-center gap-2">
                    <div className="w-8 h-8 rounded border border-zinc-700/30 overflow-hidden">
                      <input
                        type="color"
                        value={textColor}
                        onChange={(e) => onTextColorChange(e.target.value)}
                        className="w-10 h-10 -m-1 cursor-pointer"
                      />
                    </div>
                    <span className="text-sm text-zinc-400">{textColor}</span>
                  </div>
                </div>

                {textBorder && (
                  <div className="flex items-center justify-between">
                    <label className="text-sm text-zinc-400">Border Color</label>
                    <div className="flex items-center gap-2">
                      <div className="w-8 h-8 rounded border border-zinc-700/30 overflow-hidden">
                        <input
                          type="color"
                          value={strokeColor}
                          onChange={(e) => onStrokeColorChange(e.target.value)}
                          className="w-10 h-10 -m-1 cursor-pointer"
                        />
                      </div>
                      <span className="text-sm text-zinc-400">{strokeColor}</span>
                    </div>
                  </div>
                )}
              </div>
            </div>

            {/* Logo Controls */}
            <div className="space-y-4">
              <div className="space-y-2">
                <label className="text-sm text-zinc-400">Logo</label>
                <div className="flex gap-4">
                  <div className="flex-1">
                    <input
                      type="file"
                      accept="image/*"
                      onChange={(e) => {
                        const file = e.target.files?.[0];
                        if (file) {
                          const reader = new FileReader();
                          reader.onloadend = () => {
                            onLogoChange(reader.result as string);
                          };
                          reader.readAsDataURL(file);
                        }
                      }}
                      className="hidden"
                      id="logo-upload"
                    />
                    <Button
                      type="button"
                      onClick={() => document.getElementById("logo-upload")?.click()}
                      variant="outline"
                      className="w-full bg-zinc-800/30 border-zinc-700/30 hover:bg-zinc-700/30 hover:text-emerald-500"
                    >
                      {logo ? "Change Logo" : "Upload Logo"}
                    </Button>
                  </div>
                  {logo && (
                    <Button
                      type="button"
                      onClick={() => onLogoChange(null)}
                      variant="outline"
                      className="bg-zinc-800/30 border-zinc-700/30 hover:bg-red-900/30 hover:text-red-500"
                    >
                      <X className="h-4 w-4" />
                    </Button>
                  )}
                </div>
              </div>

              {logo && (
                <div className="space-y-2">
                  <label className="text-sm text-zinc-400">Logo Position</label>
                  <select
                    value={logoPosition}
                    onChange={(e) => onLogoPositionChange(e.target.value as TextPosition)}
                    className="w-full bg-zinc-800/30 border border-zinc-700/30 text-zinc-100 rounded-md p-2 cursor-pointer hover:bg-zinc-700/30 focus:outline-none focus:ring-2 focus:ring-emerald-500"
                  >
                    <option className="bg-zinc-800" value="top">Top</option>
                    <option className="bg-zinc-800" value="center">Center</option>
                    <option className="bg-zinc-800" value="bottom">Bottom</option>
                  </select>
                </div>
              )}
            </div>
          </div>

          <div className="px-6 space-y-6 pb-6">
            {/* Warning Message */}
            <div className="bg-yellow-500/10 border border-yellow-500/30 rounded-lg p-4">
              <p className="text-yellow-300 text-sm">
                ⚠️ This is a scaled preview. The final image will be 1080x1920
                pixels.
              </p>
            </div>

            {/* Image Preview with Text Overlay */}
            <div className="relative max-w-[400px] mx-auto bg-zinc-900/50 p-4 rounded-xl">
              <div className="relative w-full aspect-[9/16] bg-black/50 rounded-lg shadow-lg overflow-hidden">
                {/* Background Image */}
                {selectedImage && (
                  <div className="absolute inset-0">
                    <img
                      src={selectedImage}
                      alt="Selected image"
                      className="w-full h-full object-cover rounded-lg"
                    />
                  </div>
                )}

                {/* Text Overlay */}
                <div
                  className={`absolute inset-0 flex z-20 ${
                    textPosition === "top"
                      ? "items-start pt-16"
                      : textPosition === "bottom"
                      ? "items-end pb-16"
                      : "items-center"
                  } justify-center p-8`}
                >
                  <div
                    className={`text-center max-w-[80%] break-words whitespace-pre-wrap ${
                      !textBorder && "drop-shadow-lg"
                    }`}
                    style={{
                      color: textColor,
                      fontSize: `${Math.round(FONT_SIZES[fontSize] * 0.4)}px`,
                      fontWeight: isBold ? "bold" : "normal",
                      fontStyle: isItalic ? "italic" : "normal",
                      textDecoration: isUnderline ? "underline" : "none",
                      ...(textBorder && {
                        WebkitTextStroke: `${borderSize}px ${strokeColor}`,
                        textStroke: `${borderSize}px ${strokeColor}`,
                      }),
                    }}
                  >
                    {overlayText}
                  </div>
                </div>

                {/* Logo Overlay */}
                {logo && (
                  <div
                    className={`absolute inset-0 flex z-10 ${
                      logoPosition === "top"
                        ? "items-start pt-8"
                        : logoPosition === "bottom"
                        ? "items-end pb-8"
                        : "items-center"
                    } justify-center p-8 pointer-events-none`}
                  >
                    <img
                      src={logo}
                      alt="Logo overlay"
                      className="h-16 w-auto object-contain drop-shadow-lg"
                    />
                  </div>
                )}
              </div>
            </div>
          </div>
        </div>

        {/* Footer */}
        <div className="flex flex-col p-6 border-t border-emerald-800/30 bg-zinc-900/95">
          {/* Full Size Preview Button */}
          <Button
            onClick={() => {
              const previewWindow = window.open("", "_blank");
              if (previewWindow) {
                previewWindow.document.write(`
                  <html>
                    <head>
                      <title>Full Size Preview</title>
                      <style>
                        body { 
                          margin: 0; 
                          padding: 20px;
                          background: #18181B;
                          min-height: 100vh;
                          display: flex;
                          justify-content: center;
                          align-items: start;
                        }
                        .container {
                          width: 1080px;
                          height: 1920px;
                          position: relative;
                          background: #000;
                        }
                        img {
                          width: 100%;
                          height: 100%;
                          object-fit: contain;
                          object-position: left;
                        }
                        .text-overlay {
                          position: absolute;
                          inset: 0;
                          display: flex;
                          align-items: ${
                            textPosition === "top"
                              ? "flex-start"
                              : textPosition === "bottom"
                              ? "flex-end"
                              : "center"
                          };
                          justify-content: center;
                          padding: ${
                            textPosition === "top"
                              ? "4rem 2rem 2rem"
                              : textPosition === "bottom"
                              ? "2rem 2rem 4rem"
                              : "2rem"
                          };
                        }
                        .text {
                          color: ${textColor};
                          font-family: system-ui;
                          font-weight: ${isBold ? "bold" : "normal"};
                          font-style: ${isItalic ? "italic" : "normal"};
                          text-decoration: ${isUnderline ? "underline" : "none"};
                          text-align: center;
                          max-width: 80%;
                          white-space: pre-wrap;
                          font-size: ${FONT_SIZES[fontSize]}px;
                          ${
                            textBorder
                              ? `
                            -webkit-text-stroke: ${borderSize}px ${strokeColor};
                            text-stroke: ${borderSize}px ${strokeColor};
                          `
                              : `
                            text-shadow: 2px 2px 4px rgba(0,0,0,0.5);
                          `
                          }
                        }
                        .logo-overlay {
                          position: absolute;
                          inset: 0;
                          display: flex;
                          align-items: ${
                            logoPosition === "top"
                              ? "flex-start"
                              : logoPosition === "bottom"
                              ? "flex-end"
                              : "center"
                          };
                          justify-content: center;
                          padding: 2rem;
                        }
                        .logo {
                          height: 60px;
                          width: auto;
                          object-fit: contain;
                          filter: drop-shadow(0px 2px 4px rgba(0,0,0,0.5));
                        }
                      </style>
                    </head>
                    <body>
                      <div class="container">
                        ${
                          selectedImage
                            ? `<img src="${selectedImage}" alt="Preview" />`
                            : ""
                        }
                        <div class="text-overlay">
                          <p class="text">${overlayText}</p>
                        </div>
                        ${
                          logo
                            ? `<div class="logo-overlay">
                                <img src="${logo}" alt="Logo" class="logo" />
                              </div>`
                            : ""
                        }
                      </div>
                    </body>
                  </html>
                `);
              }
            }}
            variant="outline"
            className="w-full bg-zinc-800/30 border-zinc-700/30 hover:bg-zinc-400/80 py-6 mb-4 cursor-pointer"
          >
            <span className="h-5 w-5 mr-2">🔍</span>
            Open Full Size Preview
          </Button>

          {/* Download Button */}
          <Button
            onClick={onDownload}
            className="w-full bg-emerald-600 hover:bg-emerald-800/90 text-white py-6 cursor-pointer"
          >
            <Download className="h-5 w-5 mr-2" />
            Download Image
          </Button>
        </div>
      </div>
    </div>
  );
}